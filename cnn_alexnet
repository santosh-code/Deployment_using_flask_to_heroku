{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled",
      "provenance": [],
      "authorship_tag": "ABX9TyO9O3eh8SPQl7UR6r/gHCny",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/santosh-code/Deployment_using_flask_to_heroku/blob/main/cnn_alexnet\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zXHA3yeVTwhO",
        "outputId": "df067c6d-0bb3-42b2-89af-86da2f4e1357"
      },
      "source": [
        "import keras\n",
        "from keras.datasets import mnist\n",
        "from keras.layers import Conv2D, MaxPooling2D\n",
        "from keras.layers import Dense, Flatten\n",
        "from keras.models import Sequential\n",
        "\n",
        "# Loading the dataset and perform splitting\n",
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
        "# Peforming reshaping operation\n",
        "x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\n",
        "x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)\n",
        "\n",
        "# Normalization\n",
        "x_train = x_train / 255\n",
        "x_test = x_test / 255\n",
        "\n",
        "# One Hot Encoding\n",
        "y_train = keras.utils.to_categorical(y_train, 10)\n",
        "y_test = keras.utils.to_categorical(y_test, 10)\n",
        "# Building the Model Architecture\n",
        "\n",
        "model = Sequential()\n",
        "# Select 6 feature convolution kernels with a size of 5 * 5 (without offset), and get 66 feature maps. The size of each feature map is 32−5 + 1 = 2832−5 + 1 = 28.\n",
        "# That is, the number of neurons has been reduced from 10241024 to 28 ∗ 28 = 784 28 ∗ 28 = 784.\n",
        "# Parameters between input layer and C1 layer: 6 ∗ (5 ∗ 5 + 1)\n",
        "model.add(Conv2D(6, kernel_size=(5, 5), activation='relu', input_shape=(28, 28, 1)))\n",
        "# The input of this layer is the output of the first layer, which is a 28 * 28 * 6 node matrix.\n",
        "# The size of the filter used in this layer is 2 * 2, and the step length and width are both 2, so the output matrix size of this layer is 14 * 14 * 6.\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "# The input matrix size of this layer is 14 * 14 * 6, the filter size used is 5 * 5, and the depth is 16. This layer does not use all 0 padding, and the step size is 1.\n",
        "# The output matrix size of this layer is 10 * 10 * 16. This layer has 5 * 5 * 6 * 16 + 16 = 2416 parameters\n",
        "model.add(Conv2D(16, kernel_size=(5, 5), activation='relu'))\n",
        "# The input matrix size of this layer is 10 * 10 * 16. The size of the filter used in this layer is 2 * 2, and the length and width steps are both 2, so the output matrix size of this layer is 5 * 5 * 16.\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "# The input matrix size of this layer is 5 * 5 * 16. This layer is called a convolution layer in the LeNet-5 paper, but because the size of the filter is 5 * 5, #\n",
        "# So it is not different from the fully connected layer. If the nodes in the 5 * 5 * 16 matrix are pulled into a vector, then this layer is the same as the fully connected layer.\n",
        "# The number of output nodes in this layer is 120, with a total of 5 * 5 * 16 * 120 + 120 = 48120 parameters.\n",
        "model.add(Flatten())\n",
        "model.add(Dense(120, activation='relu'))\n",
        "# The number of input nodes in this layer is 120 and the number of output nodes is 84. The total parameter is 120 * 84 + 84 = 10164 (w + b)\n",
        "model.add(Dense(84, activation='relu'))\n",
        "# The number of input nodes in this layer is 84 and the number of output nodes is 10. The total parameter is 84 * 10 + 10 = 850\n",
        "model.add(Dense(10, activation='softmax'))\n",
        "\n",
        "model.summary()\n",
        "model.compile(loss=keras.metrics.categorical_crossentropy, optimizer=keras.optimizers.Adam(), metrics=['accuracy'])\n",
        "model.fit(x_train, y_train, batch_size=128, epochs=20, verbose=1, validation_data=(x_test, y_test))\n",
        "score = model.evaluate(x_test, y_test)\n",
        "print('Test Loss:', score[0])\n",
        "print('Test accuracy:', score[1])"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11493376/11490434 [==============================] - 0s 0us/step\n",
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d (Conv2D)              (None, 24, 24, 6)         156       \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 12, 12, 6)         0         \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 8, 8, 16)          2416      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 4, 4, 16)          0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 120)               30840     \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 84)                10164     \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 10)                850       \n",
            "=================================================================\n",
            "Total params: 44,426\n",
            "Trainable params: 44,426\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/20\n",
            "469/469 [==============================] - 23s 48ms/step - loss: 0.3203 - accuracy: 0.9077 - val_loss: 0.0849 - val_accuracy: 0.9724\n",
            "Epoch 2/20\n",
            "469/469 [==============================] - 22s 47ms/step - loss: 0.0795 - accuracy: 0.9752 - val_loss: 0.0649 - val_accuracy: 0.9793\n",
            "Epoch 3/20\n",
            "469/469 [==============================] - 22s 47ms/step - loss: 0.0592 - accuracy: 0.9818 - val_loss: 0.0464 - val_accuracy: 0.9853\n",
            "Epoch 4/20\n",
            "469/469 [==============================] - 22s 47ms/step - loss: 0.0458 - accuracy: 0.9857 - val_loss: 0.0475 - val_accuracy: 0.9848\n",
            "Epoch 5/20\n",
            "469/469 [==============================] - 22s 47ms/step - loss: 0.0369 - accuracy: 0.9884 - val_loss: 0.0411 - val_accuracy: 0.9864\n",
            "Epoch 6/20\n",
            "469/469 [==============================] - 22s 48ms/step - loss: 0.0323 - accuracy: 0.9897 - val_loss: 0.0402 - val_accuracy: 0.9878\n",
            "Epoch 7/20\n",
            "469/469 [==============================] - 23s 48ms/step - loss: 0.0271 - accuracy: 0.9915 - val_loss: 0.0355 - val_accuracy: 0.9884\n",
            "Epoch 8/20\n",
            "469/469 [==============================] - 23s 48ms/step - loss: 0.0243 - accuracy: 0.9924 - val_loss: 0.0359 - val_accuracy: 0.9889\n",
            "Epoch 9/20\n",
            "469/469 [==============================] - 22s 48ms/step - loss: 0.0208 - accuracy: 0.9931 - val_loss: 0.0371 - val_accuracy: 0.9884\n",
            "Epoch 10/20\n",
            "469/469 [==============================] - 23s 48ms/step - loss: 0.0187 - accuracy: 0.9942 - val_loss: 0.0368 - val_accuracy: 0.9891\n",
            "Epoch 11/20\n",
            "469/469 [==============================] - 22s 48ms/step - loss: 0.0165 - accuracy: 0.9945 - val_loss: 0.0370 - val_accuracy: 0.9892\n",
            "Epoch 12/20\n",
            "469/469 [==============================] - 23s 48ms/step - loss: 0.0164 - accuracy: 0.9944 - val_loss: 0.0359 - val_accuracy: 0.9898\n",
            "Epoch 13/20\n",
            "469/469 [==============================] - 23s 49ms/step - loss: 0.0127 - accuracy: 0.9956 - val_loss: 0.0339 - val_accuracy: 0.9906\n",
            "Epoch 14/20\n",
            "469/469 [==============================] - 23s 49ms/step - loss: 0.0113 - accuracy: 0.9962 - val_loss: 0.0376 - val_accuracy: 0.9887\n",
            "Epoch 15/20\n",
            "469/469 [==============================] - 22s 48ms/step - loss: 0.0102 - accuracy: 0.9966 - val_loss: 0.0502 - val_accuracy: 0.9866\n",
            "Epoch 16/20\n",
            "469/469 [==============================] - 22s 48ms/step - loss: 0.0097 - accuracy: 0.9968 - val_loss: 0.0381 - val_accuracy: 0.9892\n",
            "Epoch 17/20\n",
            "469/469 [==============================] - 22s 48ms/step - loss: 0.0106 - accuracy: 0.9965 - val_loss: 0.0373 - val_accuracy: 0.9907\n",
            "Epoch 18/20\n",
            "469/469 [==============================] - 22s 48ms/step - loss: 0.0089 - accuracy: 0.9972 - val_loss: 0.0441 - val_accuracy: 0.9899\n",
            "Epoch 19/20\n",
            "469/469 [==============================] - 22s 48ms/step - loss: 0.0088 - accuracy: 0.9972 - val_loss: 0.0383 - val_accuracy: 0.9899\n",
            "Epoch 20/20\n",
            "469/469 [==============================] - 23s 48ms/step - loss: 0.0056 - accuracy: 0.9983 - val_loss: 0.0409 - val_accuracy: 0.9907\n",
            "313/313 [==============================] - 2s 7ms/step - loss: 0.0409 - accuracy: 0.9907\n",
            "Test Loss: 0.04092789441347122\n",
            "Test accuracy: 0.9907000064849854\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}